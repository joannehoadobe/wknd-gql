{"version":3,"sources":["components/Error.js","api/useGraphQL.js","components/image/index.js","components/navigation/index.js","components/teaser/index.js","components/experiencefragment/index.js","components/richtext/index.js","components/imagelist/index.js","components/entity/index.js","screens/screen/index.js","api/queries.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["GraphQLSetupError","GlobalEndpointError","ErrorScreen","error","className","style","styles","pre","a","href","e","border","borderRadius","padding","width","whiteSpace","color","AEMHeadless","require","process","REACT_APP_PUBLIC_URI","REACT_APP_GRAPHQL_ENDPOINT","REACT_APP_TOKEN","Image","props","console","log","renditions","name","getSrc","filename","rendition","url","src","_publishUrl","substr","lastIndexOf","split","ext","length","bind","Navigation","Container","Navbar","collapseOnSelect","expand","variant","Toggle","Collapse","id","Nav","content","navigation","menuItems","map","item","NavLink","menuLink","menuName","toLowerCase","Teaser","entityType","teaserPreTitle","teaserTitle","dangerouslySetInnerHTML","__html","teaserDescription","teaserCallToAction","teaserImage","XF","state","isLoaded","items","Headers","append","btoa","obj","method","headers","credentials","this","experienceFragment","_authorUrl","substring","fetch","then","res","text","response","handleJSON","setState","message","json","JSON","parse","React","Component","RichText","html","ImageList","imageListPromoAssets","promo","promoTitle","promoImage","promoPretitle","Entity","type","Screen","n","path","useParams","query","useState","data","setData","errors","setErrors","useEffect","sdk","serviceURL","endpoint","auth","runQuery","runPersistedQuery","join","mapErrors","catch","useGraphQL","hasFetched","setHasFetched","screenList","to","placeholder","role","block","_model","title","key","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a72b08d.chunk.js","sourcesContent":["//import { Theme } from \"../theme\";\r\n\r\nconst GraphQLSetupError = `Validation error of type FieldUndefined: Field 'adventureList' in type 'QueryType' is undefined @ 'adventureList'`;\r\nconst setupErrorMessage = `The Adventures, Articles Content Fragment Models are either not created and installed, or need to be resaved.`\r\nconst GlobalEndpointError = `Unexpected token < in JSON at position 0`;\r\nconst globalEndpointMessage = `The global GraphQL endpoint appears to not exist or not be setup.`\r\n\r\nexport default function ErrorScreen({ error }) {\r\n  try {\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>Error</h1>\r\n        <pre style={styles.pre}>{error}</pre>\r\n        {error === GraphQLSetupError && <span>{setupErrorMessage}</span>}\r\n        {error === GraphQLSetupError && <a style={styles.a} href=\"/libs/dam/cfm/models/console/content/models.html/conf\">Setup Content Fragments</a>}\r\n\r\n        {error === GlobalEndpointError && <span>{globalEndpointMessage}</span>}\r\n        {error === GlobalEndpointError && <a style={styles.a} href=\"/libs/cq/graphql/sites/admin/content/console.html\">Setup Global GraphQL Endpoint</a>}\r\n      </div>\r\n    );\r\n  } catch (e) {\r\n    return <div>Error with the Error</div>\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  pre: {\r\n    border: \"1px solid rgba(255, 255, 255, .1)\",\r\n    borderRadius: \"4px\",\r\n    padding: \"1rem\",\r\n    width: \"120ch\",\r\n    whiteSpace: \"normal\",\r\n  },\r\n  a: {\r\n    color: \"black\"\r\n  }\r\n}","\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst { AEMHeadless } = require('@adobe/aem-headless-client-js')\r\n\r\n\r\n// environment variable REACT_APP_GRAPHQL_ENDPOINT is used to point to endpoint in AEM\r\nconst {\r\n  REACT_APP_PUBLIC_URI,\r\n  REACT_APP_GRAPHQL_ENDPOINT,\r\n  REACT_APP_TOKEN\r\n} = process.env;\r\n\r\n/**\r\n * Custom React Hook to perform a GraphQL query\r\n * @param query - GraphQL query\r\n * @param path - Persistent query path\r\n */\r\nexport function useGraphQL(query, path) {\r\n  let [data, setData] = useState(null);\r\n  let [errors, setErrors] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const sdk = new AEMHeadless({\r\n      serviceURL: REACT_APP_PUBLIC_URI,\r\n      endpoint: REACT_APP_GRAPHQL_ENDPOINT,\r\n      auth: REACT_APP_TOKEN,\r\n    })\r\n    const request = query ? sdk.runQuery.bind(sdk) : sdk.runPersistedQuery.bind(sdk);\r\n\r\n    request(query || path)\r\n      .then(({ data, errors }) => {\r\n        if (errors) setErrors(mapErrors(errors));\r\n        if (data) setData(data);\r\n      })\r\n      .catch((error) => {\r\n        setErrors(error);\r\n      });\r\n  }, [query, path]);\r\n\r\n  return { data, errors }\r\n}\r\n\r\n/**\r\n * concatenate error messages into a single string.\r\n * @param {*} errors\r\n */\r\nexport function mapErrors(errors) {\r\n  return errors.map((error) => error.message ? error.message : error).join(\",\");\r\n}","import React from \"react\";\r\nimport Img from \"@renditions/react-img\";\r\n\r\nconst Image = (props) => {\r\n  const renditions = [\r\n      { name:\"thumbnail\", width: 319 }, \r\n      { name:\"web\", width: 1280 }\r\n    ];\r\nconsole.log(props);\r\n  const getSrc = (filename, rendition) => {\r\n    const url = props.src._publishUrl.substr(props.src._publishUrl.lastIndexOf('\\\\') + 1).split('.');\r\n    let ext = url.length > 1? url[url.length-1]:\"jpeg\";\r\n    if(ext === \"JPG\") ext = \"jpeg\";\r\n    return `${props.src._publishUrl}/_jcr_content/renditions/cq5dam.${rendition.name}.${rendition.width}.${rendition.width}.${ext}`;\r\n  };\r\n\r\n  return (\r\n    <Img\r\n      renditions={renditions}\r\n      getSrc={getSrc.bind(null, \"\")}\r\n      className={props.className}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React, { useState } from \"react\";\r\nimport ErrorScreen from \"../Error\";\r\n\r\nimport Image from \"../image\";\r\nimport \"./index.css\";\r\nimport { NavLink, Navbar, Nav, Container } from \"react-bootstrap\";\r\n\r\n\r\nexport default function Navigation(props) {\r\n  return (\r\n    <Container>\r\n      <Navbar\r\n        collapseOnSelect\r\n        className=\"justify-content-right\"\r\n        expand=\"lg\"\r\n        variant=\"light\"\r\n      >\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\">\r\n            {props.content.navigation.menuItems.map((item) => (\r\n              <NavLink key={item.menuName.toLowerCase()} href={\"#/\" + item.menuLink}>{item.menuName}</NavLink>         \r\n            ))}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ErrorScreen from \"../Error\";\r\nimport \"./index.css\";\r\nimport Image from \"../image\";\r\n\r\nexport default function Teaser(props) {\r\n\r\n  return (\r\n    <div className={props.content.entityType}>\r\n      <div className=\"floater\">\r\n        <div className=\"innerContent\">\r\n          {props.content.teaserPreTitle != null && (<div className=\"preTitle\">{props.content.teaserPreTitle}</div>)}\r\n          <h2>{props.content.teaserTitle}</h2>\r\n          \r\n          <p\r\n            dangerouslySetInnerHTML={{\r\n              __html: props.content.teaserDescription[\"html\"],\r\n            }}\r\n          />\r\n\r\n          {props.content.teaserCallToAction != null && (\r\n            <a href=\"#\" className=\"action-links\">{props.content.teaserCallToAction}</a>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Image className=\"teaser-image\" src={props.content.teaserImage} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default class XF extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            items: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let headers = new Headers();\r\n        headers.append('Authorization', 'Basic ' + btoa(process.env.REACT_APP_AUTHORIZATION));\r\n        var obj = {\r\n            method: 'GET' ,\r\n            headers: {\r\n                'Access-Control-Request-Headers': 'Authorization',\r\n                'Authorization': 'Basic ' + btoa(process.env.REACT_APP_AUTHORIZATION),\r\n                'Content-Type': 'text/plain',\r\n                'Origin': ''\r\n            },\r\n            credentials: 'include'\r\n          };\r\n\r\n        let url = this.props.content.experienceFragment._authorUrl;\r\n        url = url.substring(0, url.length-4);\r\n        fetch(url + \"model.json\", obj)\r\n            .then(res  => {\r\n                res.text().then(response => { this.handleJSON(response);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        items: response\r\n                    });\r\n                })},\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    console.log(error);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, items } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <span dangerouslySetInnerHTML={{__html: items}} >\r\n                    \r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleJSON(json) {\r\n        json = JSON.parse(json)\r\n        console.log(json[':items']['root'][':items']['container'][':items']['contentfragment']['paragraphs']);\r\n\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst RichText = ( {content} ) => {\r\n\r\n    return (\r\n        <div className={content.entityType} dangerouslySetInnerHTML={{__html: content.content.html}} />\r\n    )\r\n}\r\n\r\nexport default RichText;","import React, { useState } from \"react\";\r\nimport Image from \"../image\"\r\n\r\nimport \"./index.css\";\r\n\r\nconst ImageList = ({ content }) => {\r\n  content.imageListPromoAssets.map((promo) => {\r\n    console.log(promo.promoTitle);\r\n  });\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"imagelist\">\r\n      <div className=\"floater\">\r\n        <ul className=\"image-list\">\r\n\r\n          {content.imageListPromoAssets.map((promo) => (\r\n            <li className=\"list-item\">\r\n              <article>\r\n                <Image src={promo.promoImage} />\r\n                <span className=\"list-item-title\">{promo.promoTitle}</span>\r\n                <span className=\"list-item-description\">{promo.promoPretitle}</span>\r\n              </article>\r\n            </li>\r\n          ))}\r\n\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageList;\r\n","import React from \"react\";\r\nimport ErrorScreen from \"../Error\";\r\nimport Navigation from \"../navigation\";\r\nimport Teaser from \"../teaser\";\r\nimport XF from \"../experiencefragment\";\r\nimport RichText from \"../richtext\";\r\nimport ImageList from \"../imagelist\";\r\n\r\nexport default function Entity(props) {\r\n  // console.log(props.type);\r\n  if (props.type === \"navigation\")\r\n    return <Navigation content={props.content} />;\r\n  else if (props.type === \"teaser\") \r\n    return <Teaser content={props.content} />;\r\n  else if (props.type === \"experience fragment\")\r\n    return <XF content={props.content} />;\r\n  else if (props.type === \"rich text\")\r\n    return <RichText content={props.content} />\r\n  else if (props.type === \"image list\")\r\n    return <ImageList content={props.content} />\r\n  else return <p>default</p>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport ErrorScreen from \"../../components/Error\";\r\n\r\nimport { screenQuery } from \"../../api/queries\";\r\nimport { useGraphQL } from \"../../api/useGraphQL\";\r\n\r\nimport Navigation from \"../../components/navigation\";\r\nimport Entity from \"../../components/entity\";\r\n\r\nimport { Link, useParams } from \"react-router-dom\";\r\n\r\nexport default function Screen(props) {\r\n  let n = 1;\r\n\r\n  let { path } = useParams();\r\n\r\n  const { data, errors } = useGraphQL(screenQuery(path || 'home'));\r\n\r\n  const [hasFetched, setHasFetched] = useState(false);\r\n\r\n  if (errors != null) {\r\n    setHasFetched(true);\r\n    return <ErrorScreen error={errors} />;\r\n  } else if (!hasFetched && data === null) {\r\n    return <span>What to do here?</span>;\r\n  } else if (hasFetched && !data.screenList.items) {\r\n    return <ErrorScreen error=\"There was an error with the returned data.\" />;\r\n  } else if (data != null) {\r\n    if (!hasFetched) setHasFetched(true);\r\n\r\n    return (\r\n      <div className=\"grid-container\">\r\n        <div className=\"header\">test</div>\r\n        <div className=\"left row2\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src=\"https://wknd.site/content/experience-fragments/wknd/language-masters/en/site/header/master/_jcr_content/root/container/container_1195249223/image.coreimg.svg/1594412560447/wknd-logo-dk.svg\"\r\n              width=\"96\"\r\n            />\r\n          </Link>\r\n        </div>\r\n        <div className=\"middle row2\">\r\n          <Navigation content={data.screenList.items[0]} />\r\n        </div>\r\n\r\n        <div className=\"right row2\">\r\n          <input\r\n            className=\"search\"\r\n            data-cmp-hook-search=\"input\"\r\n            type=\"text\"\r\n            name=\"fulltext\"\r\n            placeholder=\"Search\"\r\n            role=\"combobox\"\r\n          />\r\n        </div>\r\n\r\n        {data.screenList.items[0].block.map((item) => (\r\n          <div key={\"block\" + n} className={\"block\" + n++}>\r\n            <Entity key={item.key} type={item._model.title.toLowerCase()} content={item} />\r\n          </div>\r\n        ))}\r\n\r\n        \r\n\r\n        <div className=\"footer\">\r\n          <p>Footer</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const navigationListQuery = `{\r\n  topList {\r\n    items {\r\n      menuItems {\r\n        _path\r\n        menuName\r\n        items {\r\n          ... on CategoryListModel {\r\n            _path\r\n            categoryName\r\n            category {\r\n              linkName\r\n              linkurl\r\n              isBold\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\nexport function screenQuery(name) {\r\n  return `{\r\n  screenList(filter: {\r\n    screenName: {\r\n      _expressions: {\r\n        value: \"${name}\"\r\n        _ignoreCase: true\r\n      }\r\n    }\r\n  }) {\r\n    items {\r\n      navigation {\r\n        ... on TopModel {\r\n          menuItems {\r\n            menuName\r\n            menuLink\r\n            items {\r\n              __typename\r\n              ... on LinksModel {\r\n                linkurl\r\n                linkName\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      block {\r\n        __typename\r\n        ... on TeaserModel {\r\n          _model {\r\n            _path\r\n            title\r\n          }\r\n          teaserPreTitle\r\n          teaserCallToAction\r\n          teaserLink\r\n          teaserImage {\r\n            ... on ImageRef {\r\n              _authorUrl\r\n              _publishUrl\r\n              width\r\n              height\r\n              mimeType\r\n            }\r\n          }\r\n          teaserTitle\r\n          teaserDescription {\r\n            html\r\n            plaintext\r\n          }\r\n          entityType\r\n        }\r\n        ... on ExperienceFragmentModel {\r\n          _model {\r\n            title\r\n          }\r\n          name\r\n          experienceFragment {\r\n            ... on PageRef { \r\n              _publishUrl\r\n              _authorUrl\r\n            }\r\n          }\r\n        }\r\n        ... on RichTextModel {\r\n          _model {\r\n            title\r\n          }\r\n          content {\r\n            html\r\n          }\r\n          entityType\r\n        }\r\n        ... on ImageListModel {\r\n          _model {\r\n            _path\r\n            title\r\n          }\r\n          imageListPromoAssets {\r\n            promoTitle\r\n            promoPretitle\r\n            promoImage {\r\n              ... on ImageRef {\r\n                _publishUrl\r\n                _authorUrl\r\n              }\r\n            }\r\n            promoContentLink\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;\r\n}\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { HashRouter, Switch, Route, useParams } from \"react-router-dom\";\r\nimport Screen from \"./screens/screen\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route path={\"/:path\"}>\r\n          <Screen />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Screen />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from \"./serviceWorkerRegistration\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}