{"version":3,"sources":["components/Error.js","api/useGraphQL.js","components/navigation/index.js","api/queries.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["GraphQLSetupError","GlobalEndpointError","ErrorScreen","error","className","style","styles","pre","a","href","e","border","borderRadius","padding","width","whiteSpace","color","AEMHeadless","require","process","REACT_APP_PUBLIC_URI","REACT_APP_GRAPHQL_ENDPOINT","REACT_APP_AUTHORIZATION","Navigation","query","path","useState","data","setData","errors","setErrors","useEffect","sdk","serviceURL","endpoint","auth","split","runQuery","bind","runPersistedQuery","then","map","message","join","mapErrors","catch","useGraphQL","hasFetched","setHasFetched","console","log","topList","items","Navbar","collapseOnSelect","expand","variant","bg","Container","Brand","Toggle","Collapse","id","Nav","menuItems","item","NavDropdown","title","menuName","category","Header","categoryName","Divider","links","Item","linkUrl","linkName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89499dbd.chunk.js","sourcesContent":["//import { Theme } from \"../theme\";\r\n\r\nconst GraphQLSetupError = `Validation error of type FieldUndefined: Field 'adventureList' in type 'QueryType' is undefined @ 'adventureList'`;\r\nconst setupErrorMessage = `The Adventures, Articles Content Fragment Models are either not created and installed, or need to be resaved.`\r\nconst GlobalEndpointError = `Unexpected token < in JSON at position 0`;\r\nconst globalEndpointMessage = `The global GraphQL endpoint appears to not exist or not be setup.`\r\n\r\nexport default function ErrorScreen({ error }) {\r\n  try {\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>Error</h1>\r\n        <pre style={styles.pre}>{error}</pre>\r\n        {error === GraphQLSetupError && <span>{setupErrorMessage}</span>}\r\n        {error === GraphQLSetupError && <a style={styles.a} href=\"/libs/dam/cfm/models/console/content/models.html/conf\">Setup Content Fragments</a>}\r\n\r\n        {error === GlobalEndpointError && <span>{globalEndpointMessage}</span>}\r\n        {error === GlobalEndpointError && <a style={styles.a} href=\"/libs/cq/graphql/sites/admin/content/console.html\">Setup Global GraphQL Endpoint</a>}\r\n      </div>\r\n    );\r\n  } catch (e) {\r\n    return <div>Error with the Error</div>\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  pre: {\r\n    border: \"1px solid rgba(255, 255, 255, .1)\",\r\n    borderRadius: \"4px\",\r\n    padding: \"1rem\",\r\n    width: \"120ch\",\r\n    whiteSpace: \"normal\",\r\n  },\r\n  a: {\r\n    color: \"black\"\r\n  }\r\n}","\r\nimport { useState, useEffect } from 'react';\r\nconst { AEMHeadless } = require('@adobe/aem-headless-client-js')\r\n\r\n// environment variable REACT_APP_GRAPHQL_ENDPOINT is used to point to endpoint in AEM\r\nconst {\r\n  REACT_APP_PUBLIC_URI,\r\n  REACT_APP_GRAPHQL_ENDPOINT,\r\n  REACT_APP_AUTHORIZATION\r\n} = process.env;\r\n\r\n/**\r\n * Custom React Hook to perform a GraphQL query\r\n * @param query - GraphQL query\r\n * @param path - Persistent query path\r\n */\r\nexport function useGraphQL(query, path) {\r\n  let [data, setData] = useState(null);\r\n  let [errors, setErrors] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const sdk = new AEMHeadless({\r\n      serviceURL: REACT_APP_PUBLIC_URI,\r\n      endpoint: REACT_APP_GRAPHQL_ENDPOINT,\r\n      auth: REACT_APP_AUTHORIZATION.split(\":\"),\r\n    })\r\n    const request = query ? sdk.runQuery.bind(sdk) : sdk.runPersistedQuery.bind(sdk);\r\n\r\n    request(query || path)\r\n      .then(({ data, errors }) => {\r\n        if (errors) setErrors(mapErrors(errors));\r\n        if (data) setData(data);\r\n      })\r\n      .catch((error) => {\r\n        setErrors(error);\r\n      });\r\n  }, [query, path]);\r\n\r\n  return { data, errors }\r\n}\r\n\r\n/**\r\n * concatenate error messages into a single string.\r\n * @param {*} errors\r\n */\r\nexport function mapErrors(errors) {\r\n  return errors.map((error) => error.message ? error.message : error).join(\",\");\r\n}","import React, { useState } from \"react\";\r\nimport ErrorScreen from \"../Error\";\r\n\r\n//import data from \"../../api/gql.json\";\r\nimport { navigationListQuery } from \"../../api/queries\";\r\nimport { useGraphQL } from \"../../api/useGraphQL\";\r\n\r\nimport Image from \"../image\";\r\n\r\nimport { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\r\n\r\nexport default function Navigation() {\r\n  const { data, errors } = useGraphQL(navigationListQuery);\r\n  //const errors = null;\r\n\r\n  const [hasFetched, setHasFetched] = useState(false);\r\n\r\n  console.log();\r\n\r\n  if (errors != null) {\r\n    setHasFetched(true);\r\n    return <ErrorScreen error={errors} />;\r\n  } else if (!hasFetched && data === null) {\r\n    return <span>What to do here?</span>;\r\n  } else if (hasFetched && !data.topList.items) {\r\n    console.log(data.topList.items);\r\n    return <ErrorScreen error=\"There was an error with the returned data.\" />;\r\n  } else if (data != null) {\r\n    if (!hasFetched) setHasFetched(true);\r\n\r\n    return (\r\n      <Navbar collapseOnSelect expand=\"lg\" variant=\"light\" bg=\"light\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#\">Navbar</Navbar.Brand>\r\n\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n              {data.topList.items[0].menuItems.map((item) => (\r\n\r\n                <NavDropdown title={item.menuName} id=\"collasible-nav-dropdown\">\r\n                  {item.items.map((category) => (\r\n\r\n                    <NavDropdown.Header title={category.categoryName}>{category.categoryName}\r\n                      <NavDropdown.Divider />\r\n                      {category.category.map((links) => (\r\n                        <NavDropdown.Item href={links.linkUrl}>\r\n                          {links.linkName}\r\n                        </NavDropdown.Item>\r\n                      ))}\r\n                    </NavDropdown.Header>\r\n\r\n\r\n                  ))}\r\n\r\n                </NavDropdown>\r\n\r\n              ))}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n\r\n\r\n  }\r\n}\r\n","export const navigationListQuery = `{\r\n  topList {\r\n    items {\r\n      menuItems {\r\n        _path\r\n        menuName\r\n        items {\r\n          ... on CategoryListModel {\r\n            _path\r\n            categoryName\r\n            category {\r\n              linkName\r\n              linkURL\r\n              isBold\r\n            }\r\n          }\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n}`;","import \"./App.css\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport Navigation from \"./components/navigation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navigation />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from \"./serviceWorkerRegistration\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}